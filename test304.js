;(function () {

  // 代理模式的类型较多，不同类型的代理模式有不同的优缺点，它们应用于不同的场合：

  // (1) 当客户端对象需要访问远程主机中的对象时可以使用远程代理。

  // (2) 当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象，从而降低系统开销、缩短运行时间时可以使用虚拟代理，例如一个对象需要很长时间才能完成加载时。

  // (3) 当需要为某一个被频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问这些结果时可以使用缓冲代理。通过使用缓冲代理，系统无须在客户端每一次访问时都重新执行操作，只需直接从临时缓冲区获取操作结果即可。

  // (4) 当需要控制对一个对象的访问，为不同用户提供不同级别的访问权限时可以使用保护代理。

  // (5) 当需要为一个对象的访问（引用）提供一些额外的操作时可以使用智能引用代理。

  // 代理模式能够将代理对象与被调用的对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，
  // 这样，可以起到保护目标对象的作用。代理对象也可以对目标对象调用之前进行其他的操作。

  function fn (a, b) {
    return a + b
  }

  const copiedFn = fn
  function $fn (a, b) {
    const sum = copiedFn(a, b)
    return sum * 100
  }

  console.log($fn(1, 2)) // 300

})();